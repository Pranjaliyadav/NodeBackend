install express and nodemon(as dev dep)
i body-parser

CORS - Cross Origin Resource Sharing, by defaulti its not allowed
like client can be running at 4000, servr at 3000

const { v4: uuidv4 } = require('uuid');
 
const storage = multer.diskStorage({
    destination: function(req, file, cb) {
        cb(null, 'images');
    },
    filename: function(req, file, cb) {
        cb(null, uuidv4())
    }
});
npm install --save uuid

To ensure that images can be loaded correctly on the frontend, you should also change the logic in the feed.js controller:

in createPosts, change the imageUrl const:

exports.createPost = (req, res, next) => {
    ...
    const imageUrl = req.file.path.replace("\\" ,"/");
    ...
}
and in updatePost (once we added that later):

exports.updatePost = (req, res, next) => {
    ...
    imageUrl = req.file.path.replace("\\","/");
}

npm i --save jsonwebtoken

Module - async/await

Module - web sockets
websockets are established via http
server can push data to client without client making a request
socket.io can be used
npm i --save socket.io

Module - graphql
with rest api - stateless, client independent api for exchanging data
graphql - same as rest just with higher query flexibility

graphql only has POST request. query expression can be sent to define the data that should be returned
define query defination, mutation def, subscrption def
npm i --save graphql express-graphql
https://graphql.org/learn/

call - 
mutation{
  signupUser(userInput: {email : "ts@ts.ts", name : "pran", password : "hellls"}) {
    _id
    email 
  }
}

result - 
{
  "data": {
    "signupUser": {
      "_id": "6755ec91e6392fcac4b9358f",
      "email": "ts@ts.ts"
    }
  }
}


graphql only takes json data. so file cant be directly uploaded through query
use REST api for that

how to prepare code for production

- use environment variables - avoid hard coded values in your code
- use production API keys - dont use that testing stripe API
- reduce error output details - dont send senstive info to your users
- set secure response headers - impleent best practices
- add asset compression - reduce response size
- configure logging - stay up to date abt whats happening 
- use SSL/TLS - encrypt data in transit

npm i --save helmet 
adds headers 